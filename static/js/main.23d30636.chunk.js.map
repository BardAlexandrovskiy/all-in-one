{"version":3,"sources":["components/Footer/index.js","screens/MainScreen/index.js","screens/NewsScreen/index.js","screens/WeatherScreen/index.js","actions/toDo.js","components/TasksHeader/index.js","constants/tasks.js","components/TasksItem/index.js","components/TasksMain/index.js","components/TasksFilterButton/index.js","components/TasksFooter/index.js","components/TasksWelcomeBanner/index.js","screens/TasksScreen/index.js","router/index.js","reducers/toDo.js","reducers/index.js","store/index.js","App.js","serviceWorkerRegistration.js","index.js"],"names":["Footer","className","to","icon","faHome","faNewspaper","faCloud","faListUl","MainScreen","NewsScreen","req","Request","fetch","then","res","status","json","Error","newsObject","console","log","catch","finally","React","Component","WeatherScreen","ADD_NEW_TASK","TOGGLE_TASK","DELETE_TASK","CHANGE_TASK_FILTER","CHANGE_SEARCH_TASKS_INPUT_VALUE","CHANGE_ADD_TASK_INPUT_VALUE","CHECK_ALL_TASKS","DELETE_COMPLETED_TASKS","EDIT_TASK","changeAddTaskInputValue","value","type","payload","changeTaskFilter","filter","changeSearchTasksInputValue","TasksHeader","handleChangeInput","e","props","target","handleClickClearButton","this","tasksList","searchTasksInputValue","checkAllTasks","deleteCompletedTasks","check","counter","forEach","el","CSSTransition","in","length","timeout","unmountOnExit","mountOnEnter","onClick","faBackspace","onChange","placeholder","faChevronDown","mapDispatchToProps","connect","store","toDo","list","filterAll","filterActive","filterCompleted","Hightlight","otherValue","hightlightValue","ChangedValue","searchValue","string","newSearchValue","replace","regExp","RegExp","matchValue","match","split","map","index","array","shift","TasksItem","handleClickValue","setState","isShowEditValue","editorValue","handleChangeEditor","addNewValue","editTask","id","state","trim","handlePressEditor","key","handleBlurEditor","handleFocusEditor","event","toggleTask","deleteTask","searchInputValue","faCheck","SwitchTransition","onFocus","autoFocus","onKeyPress","onBlur","faTimes","data","TasksMain","componentDidUpdate","prevProps","prevTasksList","prevFilter","prevSearchValue","currentTasksList","currentFilter","currentSearchValue","tasksMain","current","scrollTo","createRef","ref","TransitionGroup","component","task","toLowerCase","includes","reverse","name","title","TasksFooter","handlePressInput","handleClickButton","addTaskInputValue","addNewTask","redInputBorder","handleBlurInput","faPlus","TasksWelcomeBanner","faAngleDown","TasksScreen","mode","RouterAnimation","location","useLocation","path","element","useEffect","localStorage","setItem","JSON","stringify","localInitialState","parse","getItem","initialState","rootReducer","combineReducers","action","concat","Date","now","item","createStore","applyMiddleware","thunk","App","Boolean","window","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"gaAgDeA,EArCA,WACb,OACE,wBAAQC,UAAU,SAAlB,SACE,qBAAKA,UAAU,6BAAf,SACE,qBAAKA,UAAU,WAAf,SACE,+BACE,6BACE,eAAC,IAAD,CAASC,GAAG,IAAZ,UACE,cAAC,IAAD,CAAiBC,KAAMC,MADzB,kDAKF,6BACE,eAAC,IAAD,CAASF,GAAG,QAAZ,UACE,cAAC,IAAD,CAAiBC,KAAME,MADzB,kDAKF,6BACE,eAAC,IAAD,CAASH,GAAG,WAAZ,UACE,cAAC,IAAD,CAAiBC,KAAMG,MADzB,4CAKF,6BACE,eAAC,IAAD,CAASJ,GAAG,SAAZ,UACE,cAAC,IAAD,CAAiBC,KAAMI,MADzB,sDC9BCC,G,MAJI,WACjB,OAAO,qBAAKP,UAAU,qBAAf,0B,gCCDHQ,E,uKACJ,WACE,IAKMC,EAAM,IAAIC,QAJd,wGAKFC,MAAMF,GACHG,MAAK,SAACC,GACL,GAAmB,MAAfA,EAAIC,OACN,OAAOD,EAAIE,OAEb,MAAM,IAAIC,MAAMH,EAAIC,WAErBF,MAAK,SAACK,GACLC,QAAQC,IAAIF,MAEbG,OAAM,iBAAM,WACZC,SAAQ,kBAAMH,QAAQC,IAAI,gB,oBAG/B,WACE,OAAO,qBAAKnB,UAAU,2B,GAvBDsB,IAAMC,WA2BhBf,ICzBAgB,EAJO,WACpB,OAAO,qBAAKxB,UAAU,2B,QCAXyB,G,MAAe,gBACfC,EAAc,cACdC,EAAc,cACdC,EAAqB,qBACrBC,EACX,kCACWC,EAA8B,8BAC9BC,EAAkB,kBAClBC,EAAyB,yBACzBC,EAAY,YAUZC,EAA0B,SAACC,GACtC,MAAO,CACLC,KAAMN,EACNO,QAAS,CAAEF,WAkBFG,EAAmB,SAACC,GAC/B,MAAO,CACLH,KAAMR,EACNS,QAAS,CAAEE,YAIFC,EAA8B,SAACL,GAC1C,MAAO,CACLC,KAAMP,EACNQ,QAAS,CAAEF,WCtCTM,E,4MACJC,kBAAoB,SAACC,IAEnBH,EADwC,EAAKI,MAArCJ,6BACoBG,EAAEE,OAAOV,Q,EAGvCW,uBAAyB,YAEvBN,EADwC,EAAKI,MAArCJ,6BACoB,K,4CAG9B,WACE,MAKIO,KAAKH,MAJPI,EADF,EACEA,UACAC,EAFF,EAEEA,sBACAC,EAHF,EAGEA,cACAC,EAJF,EAIEA,qBAGEC,GAAQ,EACRC,EAAU,EAQd,OANAL,EAAUM,SAAQ,SAACC,GACbA,EAAGH,MACLA,GAAQ,EACHC,GAAW,KAIlB,cAACG,EAAA,EAAD,CACEC,KAAMT,EAAUU,OAChBC,QAAS,IACTC,eAAa,EACbC,cAAY,EAJd,SAME,yBAAQ7D,UAAU,eAAlB,UACE,qBAAKA,UAAU,SAAf,SACE,qBAAKA,UAAU,6BAAf,SACE,sBAAKA,UAAU,gBAAf,UACE,cAACwD,EAAA,EAAD,CACEC,KAAMR,EACNU,QAAS,IACTC,eAAa,EACbC,cAAY,EAJd,SAME,qBACEC,QAASf,KAAKD,uBACd9C,UAAU,cAFZ,SAIE,cAAC,IAAD,CAAiBE,KAAM6D,UAG3B,uBACEC,SAAUjB,KAAKL,kBACfN,KAAK,OACL6B,YAAY,iCACZ9B,MAAOc,WAKf,qBAAKjD,UAAU,cAAf,SACE,sBAAKA,UAAU,6BAAf,UACE,sBAAKA,UAAU,qBAAf,UACE,qBACE8D,QAASZ,EACTlD,UAAS,iCACPgD,EAAUU,SAAWL,EAAU,SAAW,IAH9C,SAME,cAAC,IAAD,CAAiBnD,KAAMgE,QAEzB,sBAAKlE,UAAU,UAAf,+DAAoCqD,QAEtC,qBAAKrD,UAAU,sBAAf,SACE,cAACwD,EAAA,EAAD,CACEC,KAAML,EACNO,QAAS,IACTC,eAAa,EACbC,cAAY,EAJd,SAME,qBACEC,QAASX,EACTnD,UAAU,iCAFZ,6I,GAjFQsB,IAAMC,WA4G1B4C,EAAqB,CACzB3B,4BAA6B,SAACL,GAAD,OAAWK,EAA4BL,IACpEe,cAAe,iBDnER,CACLd,KAAML,ICmERoB,qBAAsB,iBD9Df,CACLf,KAAMJ,KCgEKoC,eAjBS,SAACC,GACvB,MAEIA,EADFC,KAGF,MAAO,CACLtB,UALF,EACUuB,KAKRtB,sBANF,EACgBA,yBAesBkB,EAAzBC,CAA6C3B,G,QC9H/C+B,EACJ,qBADIA,EAEL,MAEKC,EACJ,mDADIA,EAEL,SAEKC,EACJ,qEADIA,EAEL,Y,gBCHFC,EAAa,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,WAAYC,EAAsB,EAAtBA,gBAChC,OACE,qCACGD,EACD,sBAAM5E,UAAW,aAAjB,SAAgC6E,QAKhCC,EAAe,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,YAAaC,EAAa,EAAbA,OACnC,GAAID,EAAa,CACf,IAAME,EAAiBF,EAAYG,QAAQ,sBAAuB,QAC5DC,EAAS,IAAIC,OAAOH,EAAgB,MACpCI,EAAaL,EAAOM,MAAMH,GAEhC,OAAIE,EACKL,EAAOO,MAAMJ,GAAQK,KAAI,SAACZ,EAAYa,EAAOC,GAClD,GAAID,EAAQC,EAAMhC,OAAS,EAAG,CAC5B,IAAMmB,EAAkBQ,EAAWM,QACnC,OACE,cAAC,EAAD,CACEd,gBAAiBA,EACjBD,WAAYA,GACPa,EAAQT,GAInB,OAAOJ,KAGJI,EAET,OAAOA,GAGHY,E,kDACJ,WAAYhD,GAAQ,IAAD,8BACjB,cAAMA,IAORiD,iBAAmB,WACjB,IAAQ1D,EAAU,EAAKS,MAAfT,MACR,EAAK2D,SAAS,CAAEC,iBAAiB,EAAMC,YAAa7D,KAVnC,EAanB8D,mBAAqB,SAACtD,GACpBzB,QAAQC,IAAIwB,EAAEE,OAAOV,OACrB,EAAK2D,SAAS,CAAEE,YAAarD,EAAEE,OAAOV,SAfrB,EAkBnB+D,YAAc,WACZ,MAAyB,EAAKtD,MAAtBuD,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,GACVJ,EAAgB,EAAKK,MAArBL,YAEJA,EAAYM,QACdH,EAAS,CAAEC,GAAIA,EAAIjE,MAAO6D,IAC1B,EAAKF,SAAS,CAAEC,iBAAiB,KAEjC,EAAKD,SAAS,CAAEC,iBAAiB,EAAOC,YAAa,MA1BtC,EA8BnBO,kBAAoB,SAAC5D,GACL,UAAVA,EAAE6D,KACJ,EAAKN,eAhCU,EAoCnBO,iBAAmB,WACjB,EAAKP,eArCY,EAwCnBQ,kBAAoB,SAACC,GACnB,IAAMxE,EAAQwE,EAAM9D,OAAOV,MAC3BwE,EAAM9D,OAAOV,MAAQ,GACrBwE,EAAM9D,OAAOV,MAAQA,GAzCrB,EAAKkE,MAAQ,CACXN,iBAAiB,EACjBC,YAAa,IAJE,E,0CA8CnB,WAAU,IAAD,OACP,EACEjD,KAAKH,MADCT,EAAR,EAAQA,MAAOiB,EAAf,EAAeA,MAAOgD,EAAtB,EAAsBA,GAAIQ,EAA1B,EAA0BA,WAAYC,EAAtC,EAAsCA,WAAYC,EAAlD,EAAkDA,iBAGlD,EAAyC/D,KAAKsD,MAAtCN,EAAR,EAAQA,gBAAiBC,EAAzB,EAAyBA,YAEzB,OACE,qBAAIhG,UAAS,oBAAeoD,EAAQ,WAAa,IAAMgD,GAAIA,EAA3D,UACE,qBAAKpG,UAAU,eAAe8D,QAAS,kBAAM8C,EAAWR,IAAxD,SACE,cAAC5C,EAAA,EAAD,CAAeC,GAAIL,EAAOO,QAAS,IAAKC,eAAa,EAACC,cAAY,EAAlE,SACE,cAAC,IAAD,CAAiB3D,KAAM6G,UAG3B,qBAAK/G,UAAU,QAAf,SACE,cAACgH,EAAA,EAAD,UACE,cAACxD,EAAA,EAAD,CAAeG,QAAS,IAAxB,SACGoC,EACC,uBACEkB,QAASlE,KAAK2D,kBACdQ,WAAS,EACTlD,SAAUjB,KAAKkD,mBACfkB,WAAYpE,KAAKwD,kBACjBvG,UAAU,eACVoH,OAAQrE,KAAK0D,iBACbtE,MAAO6D,EACP5D,KAAK,SAGP,qBAAKpC,UAAU,QAAQ8D,QAAS,kBAAM,EAAK+B,oBAA3C,SAEI,cAAC,EAAD,CACEd,YAAa+B,EACb9B,OAAQ7C,OAjBgB4D,OAyBtC,qBAAK/F,UAAU,gBAAgB8D,QAAS,kBAAM+C,EAAWT,IAAzD,SACE,cAAC,IAAD,CAAiBlG,KAAMmH,e,GAxFT/F,IAAMC,WAqGxB4C,EAAqB,CACzB0C,WAAY,SAACT,GAAD,OH/GY,SAACA,GACzB,MAAO,CACLhE,KAAMT,EACNU,QAAS,CAAE+D,OG4GOS,CAAWT,IAC/BQ,WAAY,SAACR,GAAD,OHvHY,SAACA,GACzB,MAAO,CACLhE,KAAMV,EACNW,QAAS,CAAE+D,OGoHOQ,CAAWR,IAC/BD,SAAU,SAACmB,GAAD,OHhFY,SAACA,GACvB,MAAO,CACLlF,KAAMH,EACNI,QAASiF,GG6ESnB,CAASmB,KAGhBlD,eAZS,SAACC,GACvB,MAAO,CACLyC,iBAAkBzC,EAAMC,KAAKrB,yBAUOkB,EAAzBC,CAA6CwB,GC/ItD2B,G,wDACJ,WAAY3E,GAAQ,IAAD,8BACjB,cAAMA,IAIR4E,mBAAqB,SAACC,GACpB,IACaC,EAGTD,EAHFzE,UACQ2E,EAENF,EAFFlF,OACkBqF,EAChBH,EADFX,iBAEF,EAII,EAAKlE,MAHIiF,EADb,EACE7E,UACQ8E,EAFV,EAEEvF,OACkBwF,EAHpB,EAGEjB,kBAIAY,EAAchE,OAASmE,EAAiBnE,QACxCiE,IAAeG,GACfF,IAAoBG,IAEpB,EAAKC,UAAUC,QAAQC,SAAS,EAAG,IApBrC,EAAKF,UAAY1G,IAAM6G,YAFN,E,0CA0BnB,WACE,MAAgDpF,KAAKH,MAA7CI,EAAR,EAAQA,UAAWT,EAAnB,EAAmBA,OAAQuE,EAA3B,EAA2BA,iBAC3B,OACE,sBAAM9G,UAAU,aAAaoI,IAAKrF,KAAKiF,UAAvC,SACE,qBAAKhI,UAAU,aAAf,SACE,qBAAKA,UAAU,YAAf,SACE,6BACE,cAACqI,EAAA,EAAD,CAAiBC,UAAW,KAA5B,SACGtF,EACET,QAAO,SAACgG,GACP,OAAQhG,GACN,KAAKkC,EACH,OAAQ8D,EAAKnF,MACf,KAAKsB,EACH,OAAO6D,EAAKnF,MACd,QACE,OAAOmF,MAGZhG,QAAO,SAACgG,GACP,GAAIzB,EAAkB,CACpB,IAAMzB,EAAayB,EAAiB0B,cACpC,QAAID,EAAKpG,MAAMqG,cAAcC,SAASpD,GAItC,OAAOkD,KAGVG,UACAlD,KAAI,SAAC+C,GACJ,IAAQnF,EAAqBmF,EAArBnF,MAAOjB,EAAcoG,EAAdpG,MAAOiE,EAAOmC,EAAPnC,GACtB,OACE,cAAC5C,EAAA,EAAD,CAAwBG,QAAS,IAAjC,SACE,cAAC,EAAD,CAAWP,MAAOA,EAAOjB,MAAOA,EAAOiE,GAAIA,KADzBA,oB,GA5DlB9E,IAAMC,YAsFf6C,eAZS,SAACC,GACvB,MAEIA,EADFC,KAGF,MAAO,CACLtB,UALF,EACUuB,KAKRhC,OANF,EACgBA,OAMduE,iBAPF,EACwB7D,yBAUXmB,CAAyBmD,GCvElCpD,G,YAAqB,CACzB7B,iBAAkB,SAACC,GAAD,OAAYD,EAAiBC,MAGlC6B,gBAVS,SAACC,GACvB,MAAO,CACL9B,OAAQ8B,EAAMC,KAAK/B,UAQiB4B,EAAzBC,EAtBW,SAAC,GAA+C,IAA7CuE,EAA4C,EAA5CA,KAAMC,EAAsC,EAAtCA,MAAOtG,EAA+B,EAA/BA,iBAAkBC,EAAa,EAAbA,OACpDvC,EAAS,UACb2I,IAASpG,EAASoG,EAAO,WAAaA,EADzB,+BAIf,OACE,wBAAQ7E,QAAS,kBAAMxB,EAAiBqG,IAAO3I,UAAWA,EAA1D,SACG4I,OCGDC,G,kDACJ,WAAYjG,GAAQ,IAAD,8BACjB,cAAMA,IAMRF,kBAAoB,SAACC,GACnB,IAAQT,EAA4B,EAAKU,MAAjCV,wBACFC,EAAQQ,EAAEE,OAAOV,MAEnBA,EAAMuB,QAAU,KAClBxB,EAAwBC,IAZT,EAgBnB2G,iBAAmB,SAACnG,GACJ,UAAVA,EAAE6D,KACJ,EAAKuC,qBAlBU,EAsBnBA,kBAAoB,WAClB,MAAuD,EAAKnG,MAApDV,EAAR,EAAQA,wBAAyB8G,EAAjC,EAAiCA,kBAC7BA,EAAkBtF,QAAUsF,EAAkB1C,SAEhD2C,EADuB,EAAKrG,MAApBqG,YACGD,GACX9G,EAAwB,IACxB,EAAK4D,SAAS,CAAEoD,gBAAgB,KAEhC,EAAKpD,SAAS,CAAEoD,gBAAgB,KA9BjB,EAkCnBC,gBAAkB,WAChB,EAAKrD,SAAS,CAAEoD,gBAAgB,KAjChC,EAAK7C,MAAQ,CACX6C,gBAAgB,GAHD,E,0CAsCnB,WACE,MAAyCnG,KAAKH,MAAtCoG,EAAR,EAAQA,kBAAmBhG,EAA3B,EAA2BA,UACnBkG,EAAmBnG,KAAKsD,MAAxB6C,eACR,OACE,yBAAQlJ,UAAU,eAAlB,UACE,cAACwD,EAAA,EAAD,CACEC,KAAMT,EAAUU,OAChBC,QAAS,IACTE,cAAY,EACZD,eAAa,EAJf,SAME,qBAAK5D,UAAU,UAAf,SACE,sBAAKA,UAAU,8BAAf,UACE,cAAC,GAAD,CACE2I,KAAMnE,EACNoE,MAAOpE,IAET,cAAC,GAAD,CACEmE,KAAMlE,EACNmE,MAAOnE,IAET,cAAC,GAAD,CACEkE,KAAMjE,EACNkE,MAAOlE,WAKf,qBAAK1E,UAAU,iBAAf,SACE,qBAAKA,UAAU,4BAAf,SACE,sBAAKA,UAAU,gBAAf,UACE,uBACEA,UAAWkJ,EAAiB,MAAQ,GACpC/B,WAAYpE,KAAK+F,iBACjB1B,OAAQrE,KAAKoG,gBACbnF,SAAUjB,KAAKL,kBACfP,MAAO6G,EACP5G,KAAK,OACL6B,YAAY,0FAEd,cAACT,EAAA,EAAD,CACEC,KAAMuF,EACNrF,QAAS,IACTC,eAAa,EACbC,cAAY,EAJd,SAME,wBAAQC,QAASf,KAAKgG,kBAAmB/I,UAAU,SAAnD,SACE,cAAC,IAAD,CAAiBE,KAAMkJ,wB,GAtFf9H,IAAMC,WA6G1B4C,GAAqB,CACzB8E,WAAY,SAAC9G,GAAD,ON/GY,SAACA,GACzB,MAAO,CACLC,KAAMX,EACNY,QAAS,CAAEF,UM4GU8G,CAAW9G,IAClCD,wBAAyB,SAACC,GAAD,OAAWD,EAAwBC,KAG/CiC,gBAjBS,SAACC,GACvB,MAEIA,EADFC,KAGF,MAAO,CACLtB,UALF,EACUuB,KAKRtB,sBANF,EACgBA,sBAMd+F,kBAPF,EACuCA,qBAeD7E,GAAzBC,CAA6CyE,IC9G7CQ,I,YAdY,WACzB,OACE,qBAAKrJ,UAAU,uBAAf,SACE,sBAAKA,UAAU,YAAf,UACE,qBAAKA,UAAU,OAAf,odAIA,cAAC,IAAD,CAAiBE,KAAMoJ,aCGzBC,G,wKACJ,SAAmB9B,GACjB,MAKI1E,KAAKH,MAJIiF,EADb,EACE7E,UACAd,EAFF,EAEEA,wBACAI,EAHF,EAGEA,iBACAE,EAJF,EAIEA,4BAGiBkF,EAAkBD,EAA7BzE,WAEH6E,EAAiBnE,QAAUgE,EAAchE,SAC5CxB,EAAwB,IACxBI,EAAiBkC,GACjBhC,EAA4B,O,oBAIhC,WACE,IAAQQ,EAAcD,KAAKH,MAAnBI,UACR,OACE,sBAAKhD,UAAU,sBAAf,UACE,cAACgH,EAAA,EAAD,CAAkBwC,KAAK,SAAvB,SACE,cAAChG,EAAA,EAAD,CAAeG,QAAS,IAAxB,SACIX,EAAUU,OAGV,qCACE,cAAC,EAAD,IACA,cAAC,EAAD,OAJF,cAAC,GAAD,MAF+BV,EAAUU,UAW/C,cAAC,GAAD,W,GAlCkBpC,IAAMC,WAkD1B4C,GAAqB,CACzBjC,wBAAyB,SAACC,GAAD,OAAWD,EAAwBC,IAC5DG,iBAAkB,SAACC,GAAD,OAAYD,EAAiBC,IAC/CC,4BAA6B,SAACL,GAAD,OAAWK,EAA4BL,KAGvDiC,gBAhBS,SAACC,GAKvB,MAAO,CACLrB,UAHEqB,EADFC,KAAQC,QAc4BJ,GAAzBC,CAA6CmF,ICjDtDE,GAAkB,WACtB,IAAIC,EAAWC,cAEf,OACE,qCACE,cAACtB,EAAA,EAAD,CAAiBC,UAAW,KAA5B,SACE,cAAC9E,EAAA,EAAD,CAAkCG,QAAS,IAA3C,SACE,eAAC,IAAD,CAAQ+F,SAAUA,EAAlB,UACE,cAAC,IAAD,CAAOE,KAAK,IAAIC,QAAS,cAAC,EAAD,MACzB,cAAC,IAAD,CAAOD,KAAK,QAAQC,QAAS,cAAC,EAAD,MAC7B,cAAC,IAAD,CAAOD,KAAK,WAAWC,QAAS,cAAC,EAAD,MAChC,cAAC,IAAD,CAAOD,KAAK,SAASC,QAAS,cAAC,GAAD,UALdH,EAASlD,OAS/B,cAAC,EAAD,QASSpC,gBAJS,SAACC,GACvB,MAAO,CAAEA,MAAOA,KAGHD,EApCA,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAKhB,OAJAyF,qBAAU,WACRC,aAAaC,QAAQ,aAAcC,KAAKC,UAAU7F,OAIlD,cAAC,IAAD,UACE,cAAC,GAAD,S,0BCJF8F,GAAoBF,KAAKG,MAAML,aAAaM,QAAQ,eAMlDC,IAHJH,GADEA,GACkBA,GAAkB7F,KACb,OAEe,CACxCC,KAAM,GACNhC,OAAQiC,EACRvB,sBAAuB,GACvB+F,kBAAmB,ICpBd,IAAMuB,GAAcC,aAAgB,CACzClG,KDsBK,WAAoD,IAA/B+B,EAA8B,uDAAtBiE,GAAcG,EAAQ,uCAChDrI,EAAkBqI,EAAlBrI,KAAMC,EAAYoI,EAAZpI,QACNkC,EAAS8B,EAAT9B,KAER,OAAQnC,GACN,KAAKX,EACH,OAAO,6BACF4E,GADL,IAEE9B,KAAMA,EAAKmG,OAAO,CAChBvI,MAAOE,EAAQF,MACfiB,OAAO,EACPgD,GAAIuE,KAAKC,UAGf,KAAKlJ,EACH,OAAO,6BACF2E,GADL,IAEE9B,KAAMA,EAAKiB,KAAI,SAACqF,GACd,OAAIA,EAAKzE,KAAO/D,EAAQ+D,GACf,6BAAKyE,GAAZ,IAAkBzH,OAAQyH,EAAKzH,QACnByH,OAGpB,KAAKlJ,EACH,OAAO,6BAAK0E,GAAZ,IAAmB9B,KAAMA,EAAKhC,QAAO,qBAAG6D,KAAgB/D,EAAQ+D,QAClE,KAAKxE,EACH,OAAO,6BAAKyE,GAAZ,IAAmB9D,OAAQF,EAAQE,SACrC,KAAKV,EACH,OAAO,6BAAKwE,GAAZ,IAAmBpD,sBAAuBZ,EAAQF,QACpD,KAAKL,EACH,OAAO,6BAAKuE,GAAZ,IAAmB2C,kBAAmB3G,EAAQF,QAChD,KAAKJ,EACH,IAAIqB,GAAQ,EAMZ,OALAmB,EAAKjB,SAAQ,SAACC,GACPA,EAAGH,QACNA,GAAQ,MAGL,6BACFiD,GADL,IAEE9B,KAAMA,EAAKiB,KAAI,SAACjC,GACd,OAAO,6BAAKA,GAAZ,IAAgBH,MAAOA,SAG7B,KAAKpB,EACH,OAAO,6BACFqE,GADL,IAEE9B,KAAMA,EAAKhC,QAAO,qBAAGa,WAEzB,KAAKnB,EACH,OAAO,6BACFoE,GADL,IAEE9B,KAAMA,EAAKiB,KAAI,SAAC+C,GACd,IAAQnC,EAAc/D,EAAd+D,GAAIjE,EAAUE,EAAVF,MAIZ,OAHIoG,EAAKnC,KAAOA,IACdmC,EAAKpG,MAAQA,GAERoG,OAGb,QACE,OAAOlC,MErEEhC,GAFDyG,aAAYP,GAAaQ,aAAgBC,OCJxCC,GARH,WACV,OACE,cAAC,IAAD,CAAU5G,MAAOA,GAAjB,SACE,cAAC,GAAD,OCKc6G,QACW,cAA7BC,OAAOzB,SAAS0B,UAEe,UAA7BD,OAAOzB,SAAS0B,UAEhBD,OAAOzB,SAAS0B,SAAS9F,MAAM,2D,MCXnC+F,IAASC,OAAO,cAAC,GAAD,IAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/K,MAAK,SAACgL,GACLA,EAAaC,gBAEdzK,OAAM,SAAC0K,GACN5K,QAAQ4K,MAAMA,EAAMC,c","file":"static/js/main.23d30636.chunk.js","sourcesContent":["import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport {\r\n  faCloud,\r\n  faHome,\r\n  faListUl,\r\n  faNewspaper,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport \"./styles.scss\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <footer className=\"footer\">\r\n      <div className=\"container footer-container\">\r\n        <nav className=\"nav-menu\">\r\n          <ul>\r\n            <li>\r\n              <NavLink to=\"/\">\r\n                <FontAwesomeIcon icon={faHome} />\r\n                Главная\r\n              </NavLink>\r\n            </li>\r\n            <li>\r\n              <NavLink to=\"/news\">\r\n                <FontAwesomeIcon icon={faNewspaper} />\r\n                Новости\r\n              </NavLink>\r\n            </li>\r\n            <li>\r\n              <NavLink to=\"/weather\">\r\n                <FontAwesomeIcon icon={faCloud} />\r\n                Погода\r\n              </NavLink>\r\n            </li>\r\n            <li>\r\n              <NavLink to=\"/tasks\">\r\n                <FontAwesomeIcon icon={faListUl} />\r\n                Задачи\r\n              </NavLink>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n      </div>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import \"./styles.scss\";\r\n\r\nconst MainScreen = () => {\r\n  return <div className=\"main-screen screen\">MainScreen</div>;\r\n};\r\n\r\nexport default MainScreen;\r\n","import React from \"react\";\r\n\r\nclass NewsScreen extends React.Component {\r\n  componentDidMount() {\r\n    const url =\r\n      \"https://newsapi.org/v2/top-headlines?\" +\r\n      \"country=ua&\" +\r\n      \"pageSize=100&\" +\r\n      \"apiKey=10ade8962c444f4b9c9a49fd8f56589b\";\r\n    const req = new Request(url);\r\n    fetch(req)\r\n      .then((res) => {\r\n        if (res.status === 200) {\r\n          return res.json();\r\n        }\r\n        throw new Error(res.status);\r\n      })\r\n      .then((newsObject) => {\r\n        console.log(newsObject);\r\n      })\r\n      .catch(() => \"Error\")\r\n      .finally(() => console.log(\"The end\"));\r\n  }\r\n\r\n  render() {\r\n    return <div className=\"news-screen screen\"></div>;\r\n  }\r\n}\r\n\r\nexport default NewsScreen;\r\n","const WeatherScreen = () => {\r\n  return <div className=\"weather-screen screen\"></div>;\r\n};\r\n\r\nexport default WeatherScreen;\r\n","// Types\r\nexport const ADD_NEW_TASK = \"ADD_NEW_TASK\";\r\nexport const TOGGLE_TASK = \"TOGGLE_TASK\";\r\nexport const DELETE_TASK = \"DELETE_TASK\";\r\nexport const CHANGE_TASK_FILTER = \"CHANGE_TASK_FILTER\";\r\nexport const CHANGE_SEARCH_TASKS_INPUT_VALUE =\r\n  \"CHANGE_SEARCH_TASKS_INPUT_VALUE\";\r\nexport const CHANGE_ADD_TASK_INPUT_VALUE = \"CHANGE_ADD_TASK_INPUT_VALUE\";\r\nexport const CHECK_ALL_TASKS = \"CHECK_ALL_TASKS\";\r\nexport const DELETE_COMPLETED_TASKS = \"DELETE_COMPLETED_TASKS\";\r\nexport const EDIT_TASK = \"EDIT_TASK\";\r\n\r\n// Actions\r\nexport const addNewTask = (value) => {\r\n  return {\r\n    type: ADD_NEW_TASK,\r\n    payload: { value },\r\n  };\r\n};\r\n\r\nexport const changeAddTaskInputValue = (value) => {\r\n  return {\r\n    type: CHANGE_ADD_TASK_INPUT_VALUE,\r\n    payload: { value },\r\n  };\r\n};\r\n\r\nexport const toggleTask = (id) => {\r\n  return {\r\n    type: TOGGLE_TASK,\r\n    payload: { id },\r\n  };\r\n};\r\n\r\nexport const deleteTask = (id) => {\r\n  return {\r\n    type: DELETE_TASK,\r\n    payload: { id },\r\n  };\r\n};\r\n\r\nexport const changeTaskFilter = (filter) => {\r\n  return {\r\n    type: CHANGE_TASK_FILTER,\r\n    payload: { filter },\r\n  };\r\n};\r\n\r\nexport const changeSearchTasksInputValue = (value) => {\r\n  return {\r\n    type: CHANGE_SEARCH_TASKS_INPUT_VALUE,\r\n    payload: { value },\r\n  };\r\n};\r\n\r\nexport const checkAllTasks = () => {\r\n  return {\r\n    type: CHECK_ALL_TASKS,\r\n  };\r\n};\r\n\r\nexport const deleteCompletedTasks = () => {\r\n  return {\r\n    type: DELETE_COMPLETED_TASKS,\r\n  };\r\n};\r\n\r\nexport const editTask = (data) => {\r\n  return {\r\n    type: EDIT_TASK,\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const getLocationByIp = () => {\r\n  return () => {\r\n    fetch(\"https://api.ipify.org?format=json\")\r\n      .then((response) => {\r\n        if (response.status === 200) {\r\n          return response.json();\r\n        }\r\n        throw new Error(response.status);\r\n      })\r\n      .then((objectIp) => objectIp.ip)\r\n      .then((id) => {\r\n        fetch(`https://api.sypexgeo.net/json/${id}`)\r\n          .then((response) => {\r\n            if (response.status === 200) {\r\n              return response.json();\r\n            }\r\n            throw new Error(response.status);\r\n          })\r\n          .then((location) => console.log(location.city));\r\n      });\r\n  };\r\n};\r\n","import { faBackspace, faChevronDown } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { connect } from \"react-redux\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\n\r\nimport React from \"react\";\r\nimport \"./styles.scss\";\r\nimport {\r\n  changeSearchTasksInputValue,\r\n  checkAllTasks,\r\n  deleteCompletedTasks,\r\n} from \"../../actions/toDo\";\r\n\r\nclass TasksHeader extends React.Component {\r\n  handleChangeInput = (e) => {\r\n    const { changeSearchTasksInputValue } = this.props;\r\n    changeSearchTasksInputValue(e.target.value);\r\n  };\r\n\r\n  handleClickClearButton = () => {\r\n    const { changeSearchTasksInputValue } = this.props;\r\n    changeSearchTasksInputValue(\"\");\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      tasksList,\r\n      searchTasksInputValue,\r\n      checkAllTasks,\r\n      deleteCompletedTasks,\r\n    } = this.props;\r\n\r\n    let check = false;\r\n    let counter = 0;\r\n\r\n    tasksList.forEach((el) => {\r\n      if (el.check) {\r\n        check = true;\r\n      } else counter += 1;\r\n    });\r\n\r\n    return (\r\n      <CSSTransition\r\n        in={!!tasksList.length}\r\n        timeout={300}\r\n        unmountOnExit\r\n        mountOnEnter\r\n      >\r\n        <header className=\"tasks-header\">\r\n          <div className=\"search\">\r\n            <div className=\"container search-container\">\r\n              <div className=\"input-wrapper\">\r\n                <CSSTransition\r\n                  in={!!searchTasksInputValue}\r\n                  timeout={300}\r\n                  unmountOnExit\r\n                  mountOnEnter\r\n                >\r\n                  <div\r\n                    onClick={this.handleClickClearButton}\r\n                    className=\"clear-input\"\r\n                  >\r\n                    <FontAwesomeIcon icon={faBackspace} />\r\n                  </div>\r\n                </CSSTransition>\r\n                <input\r\n                  onChange={this.handleChangeInput}\r\n                  type=\"text\"\r\n                  placeholder=\"Поиск\"\r\n                  value={searchTasksInputValue}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"bottom-side\">\r\n            <div className=\"container bottom-container\">\r\n              <div className=\"column left-column\">\r\n                <div\r\n                  onClick={checkAllTasks}\r\n                  className={`button check-all-button${\r\n                    tasksList.length && !counter ? \" green\" : \"\"\r\n                  }`}\r\n                >\r\n                  <FontAwesomeIcon icon={faChevronDown} />\r\n                </div>\r\n                <div className=\"counter\">Активные: {counter}</div>\r\n              </div>\r\n              <div className=\"column right-column\">\r\n                <CSSTransition\r\n                  in={!!check}\r\n                  timeout={300}\r\n                  unmountOnExit\r\n                  mountOnEnter\r\n                >\r\n                  <div\r\n                    onClick={deleteCompletedTasks}\r\n                    className=\"button delete-completed-button\"\r\n                  >\r\n                    Удалить выполненные\r\n                  </div>\r\n                </CSSTransition>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </header>\r\n      </CSSTransition>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (store) => {\r\n  const {\r\n    toDo: { list, searchTasksInputValue },\r\n  } = store;\r\n\r\n  return {\r\n    tasksList: list,\r\n    searchTasksInputValue: searchTasksInputValue,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  changeSearchTasksInputValue: (value) => changeSearchTasksInputValue(value),\r\n  checkAllTasks: () => checkAllTasks(),\r\n  deleteCompletedTasks: () => deleteCompletedTasks(),\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TasksHeader);\r\n","// Filters\r\nexport const filterAll = {\r\n  title: \"Все\",\r\n  name: \"all\",\r\n};\r\nexport const filterActive = {\r\n  title: \"Активные\",\r\n  name: \"active\",\r\n};\r\nexport const filterCompleted = {\r\n  title: \"Выполненные\",\r\n  name: \"completed\",\r\n};\r\n","import { faCheck, faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { deleteTask, editTask, toggleTask } from \"../../actions/toDo\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./styles.scss\";\r\nimport React from \"react\";\r\nimport { CSSTransition, SwitchTransition } from \"react-transition-group\";\r\n\r\nconst Hightlight = ({ otherValue, hightlightValue }) => {\r\n  return (\r\n    <>\r\n      {otherValue}\r\n      <span className={\"hightlight\"}>{hightlightValue}</span>\r\n    </>\r\n  );\r\n};\r\n\r\nconst ChangedValue = ({ searchValue, string }) => {\r\n  if (searchValue) {\r\n    const newSearchValue = searchValue.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\r\n    const regExp = new RegExp(newSearchValue, \"gi\");\r\n    const matchValue = string.match(regExp);\r\n\r\n    if (matchValue) {\r\n      return string.split(regExp).map((otherValue, index, array) => {\r\n        if (index < array.length - 1) {\r\n          const hightlightValue = matchValue.shift();\r\n          return (\r\n            <Hightlight\r\n              hightlightValue={hightlightValue}\r\n              otherValue={otherValue}\r\n              key={index + string}\r\n            />\r\n          );\r\n        }\r\n        return otherValue;\r\n      });\r\n    }\r\n    return string;\r\n  }\r\n  return string;\r\n};\r\n\r\nclass TasksItem extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isShowEditValue: false,\r\n      editorValue: \"\",\r\n    };\r\n  }\r\n\r\n  handleClickValue = () => {\r\n    const { value } = this.props;\r\n    this.setState({ isShowEditValue: true, editorValue: value });\r\n  };\r\n\r\n  handleChangeEditor = (e) => {\r\n    console.log(e.target.value);\r\n    this.setState({ editorValue: e.target.value });\r\n  };\r\n\r\n  addNewValue = () => {\r\n    const { editTask, id } = this.props;\r\n    const { editorValue } = this.state;\r\n\r\n    if (editorValue.trim()) {\r\n      editTask({ id: id, value: editorValue });\r\n      this.setState({ isShowEditValue: false });\r\n    } else {\r\n      this.setState({ isShowEditValue: false, editorValue: \"\" });\r\n    }\r\n  };\r\n\r\n  handlePressEditor = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      this.addNewValue();\r\n    }\r\n  };\r\n\r\n  handleBlurEditor = () => {\r\n    this.addNewValue();\r\n  };\r\n\r\n  handleFocusEditor = (event) => {\r\n    const value = event.target.value;\r\n    event.target.value = \"\";\r\n    event.target.value = value;\r\n  };\r\n\r\n  render() {\r\n    const { value, check, id, toggleTask, deleteTask, searchInputValue } =\r\n      this.props;\r\n\r\n    const { isShowEditValue, editorValue } = this.state;\r\n\r\n    return (\r\n      <li className={`tasks-item${check ? \" checked\" : \"\"}`} id={id}>\r\n        <div className=\"check-button\" onClick={() => toggleTask(id)}>\r\n          <CSSTransition in={check} timeout={300} unmountOnExit mountOnEnter>\r\n            <FontAwesomeIcon icon={faCheck} />\r\n          </CSSTransition>\r\n        </div>\r\n        <div className=\"value\">\r\n          <SwitchTransition>\r\n            <CSSTransition timeout={100} key={isShowEditValue}>\r\n              {isShowEditValue ? (\r\n                <input\r\n                  onFocus={this.handleFocusEditor}\r\n                  autoFocus\r\n                  onChange={this.handleChangeEditor}\r\n                  onKeyPress={this.handlePressEditor}\r\n                  className=\"inner editor\"\r\n                  onBlur={this.handleBlurEditor}\r\n                  value={editorValue}\r\n                  type=\"text\"\r\n                />\r\n              ) : (\r\n                <div className=\"inner\" onClick={() => this.handleClickValue()}>\r\n                  {\r\n                    <ChangedValue\r\n                      searchValue={searchInputValue}\r\n                      string={value}\r\n                    />\r\n                  }\r\n                </div>\r\n              )}\r\n            </CSSTransition>\r\n          </SwitchTransition>\r\n        </div>\r\n        <div className=\"delete-button\" onClick={() => deleteTask(id)}>\r\n          <FontAwesomeIcon icon={faTimes} />\r\n        </div>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (store) => {\r\n  return {\r\n    searchInputValue: store.toDo.searchTasksInputValue,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  deleteTask: (id) => deleteTask(id),\r\n  toggleTask: (id) => toggleTask(id),\r\n  editTask: (data) => editTask(data),\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TasksItem);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\r\nimport { filterActive, filterCompleted } from \"../../constants/tasks\";\r\nimport TasksItem from \"../TasksItem\";\r\nimport \"./styles.scss\";\r\n\r\nclass TasksMain extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.tasksMain = React.createRef();\r\n  }\r\n\r\n  componentDidUpdate = (prevProps) => {\r\n    const {\r\n      tasksList: prevTasksList,\r\n      filter: prevFilter,\r\n      searchInputValue: prevSearchValue,\r\n    } = prevProps;\r\n    const {\r\n      tasksList: currentTasksList,\r\n      filter: currentFilter,\r\n      searchInputValue: currentSearchValue,\r\n    } = this.props;\r\n\r\n    if (\r\n      prevTasksList.length < currentTasksList.length ||\r\n      prevFilter !== currentFilter ||\r\n      prevSearchValue !== currentSearchValue\r\n    ) {\r\n      this.tasksMain.current.scrollTo(0, 0);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { tasksList, filter, searchInputValue } = this.props;\r\n    return (\r\n      <main className=\"tasks-main\" ref={this.tasksMain}>\r\n        <div className=\"tasks-list\">\r\n          <div className=\"container\">\r\n            <ul>\r\n              <TransitionGroup component={null}>\r\n                {tasksList\r\n                  .filter((task) => {\r\n                    switch (filter) {\r\n                      case filterActive.name:\r\n                        return !task.check;\r\n                      case filterCompleted.name:\r\n                        return task.check;\r\n                      default:\r\n                        return task;\r\n                    }\r\n                  })\r\n                  .filter((task) => {\r\n                    if (searchInputValue) {\r\n                      const matchValue = searchInputValue.toLowerCase();\r\n                      if (task.value.toLowerCase().includes(matchValue))\r\n                        return true;\r\n                      return false;\r\n                    } else {\r\n                      return task;\r\n                    }\r\n                  })\r\n                  .reverse()\r\n                  .map((task) => {\r\n                    const { check, value, id } = task;\r\n                    return (\r\n                      <CSSTransition key={id} timeout={300}>\r\n                        <TasksItem check={check} value={value} id={id} />\r\n                      </CSSTransition>\r\n                    );\r\n                  })}\r\n              </TransitionGroup>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (store) => {\r\n  const {\r\n    toDo: { list, filter, searchTasksInputValue },\r\n  } = store;\r\n\r\n  return {\r\n    tasksList: list,\r\n    filter: filter,\r\n    searchInputValue: searchTasksInputValue,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(TasksMain);\r\n","import { connect } from \"react-redux\";\r\nimport { changeTaskFilter } from \"../../actions/toDo\";\r\nimport \"./styles.scss\";\r\n\r\nconst TasksFilterButton = ({ name, title, changeTaskFilter, filter }) => {\r\n  const className = `${\r\n    name === filter ? name + \" current\" : name\r\n  } button tasks-filter-button`;\r\n\r\n  return (\r\n    <button onClick={() => changeTaskFilter(name)} className={className}>\r\n      {title}\r\n    </button>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (store) => {\r\n  return {\r\n    filter: store.toDo.filter,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  changeTaskFilter: (filter) => changeTaskFilter(filter),\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TasksFilterButton);\r\n","import \"./styles.scss\";\r\nimport { faPlus } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { connect } from \"react-redux\";\r\nimport { addNewTask, changeAddTaskInputValue } from \"../../actions/toDo\";\r\nimport React from \"react\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport {\r\n  filterActive,\r\n  filterCompleted,\r\n  filterAll,\r\n} from \"../../constants/tasks\";\r\nimport TasksFilterButton from \"../TasksFilterButton\";\r\n\r\nclass TasksFooter extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      redInputBorder: false,\r\n    };\r\n  }\r\n\r\n  handleChangeInput = (e) => {\r\n    const { changeAddTaskInputValue } = this.props;\r\n    const value = e.target.value;\r\n\r\n    if (value.length <= 140) {\r\n      changeAddTaskInputValue(value);\r\n    }\r\n  };\r\n\r\n  handlePressInput = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      this.handleClickButton();\r\n    }\r\n  };\r\n\r\n  handleClickButton = () => {\r\n    const { changeAddTaskInputValue, addTaskInputValue } = this.props;\r\n    if (addTaskInputValue.length && addTaskInputValue.trim()) {\r\n      const { addNewTask } = this.props;\r\n      addNewTask(addTaskInputValue);\r\n      changeAddTaskInputValue(\"\");\r\n      this.setState({ redInputBorder: false });\r\n    } else {\r\n      this.setState({ redInputBorder: true });\r\n    }\r\n  };\r\n\r\n  handleBlurInput = () => {\r\n    this.setState({ redInputBorder: false });\r\n  };\r\n\r\n  render() {\r\n    const { addTaskInputValue, tasksList } = this.props;\r\n    const { redInputBorder } = this.state;\r\n    return (\r\n      <footer className=\"tasks-footer\">\r\n        <CSSTransition\r\n          in={!!tasksList.length}\r\n          timeout={300}\r\n          mountOnEnter\r\n          unmountOnExit\r\n        >\r\n          <div className=\"filters\">\r\n            <div className=\"filters-container container\">\r\n              <TasksFilterButton\r\n                name={filterAll.name}\r\n                title={filterAll.title}\r\n              />\r\n              <TasksFilterButton\r\n                name={filterActive.name}\r\n                title={filterActive.title}\r\n              />\r\n              <TasksFilterButton\r\n                name={filterCompleted.name}\r\n                title={filterCompleted.title}\r\n              />\r\n            </div>\r\n          </div>\r\n        </CSSTransition>\r\n        <div className=\"add-task-input\">\r\n          <div className=\"container input-container\">\r\n            <div className=\"input-wrapper\">\r\n              <input\r\n                className={redInputBorder ? \"red\" : \"\"}\r\n                onKeyPress={this.handlePressInput}\r\n                onBlur={this.handleBlurInput}\r\n                onChange={this.handleChangeInput}\r\n                value={addTaskInputValue}\r\n                type=\"text\"\r\n                placeholder=\"Добавить задачу\"\r\n              />\r\n              <CSSTransition\r\n                in={!!addTaskInputValue}\r\n                timeout={300}\r\n                unmountOnExit\r\n                mountOnEnter\r\n              >\r\n                <button onClick={this.handleClickButton} className=\"button\">\r\n                  <FontAwesomeIcon icon={faPlus} />\r\n                </button>\r\n              </CSSTransition>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </footer>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (store) => {\r\n  const {\r\n    toDo: { list, searchTasksInputValue, addTaskInputValue },\r\n  } = store;\r\n\r\n  return {\r\n    tasksList: list,\r\n    searchTasksInputValue: searchTasksInputValue,\r\n    addTaskInputValue: addTaskInputValue,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  addNewTask: (value) => addNewTask(value),\r\n  changeAddTaskInputValue: (value) => changeAddTaskInputValue(value),\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TasksFooter);\r\n","import { faAngleDown } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport \"./styles.scss\";\r\n\r\nconst TasksWelcomeBanner = () => {\r\n  return (\r\n    <div className=\"tasks-welcome-banner\">\r\n      <div className=\"container\">\r\n        <div className=\"text\">\r\n          Здесь будут ваши задачи. Добавить свою первую задачу вы можете в поле\r\n          ввода внизу экрана.\r\n        </div>\r\n        <FontAwesomeIcon icon={faAngleDown} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TasksWelcomeBanner;\r\n","import TasksHeader from \"../../components/TasksHeader\";\r\nimport TasksMain from \"../../components/TasksMain\";\r\nimport TasksFooter from \"../../components/TasksFooter\";\r\nimport { CSSTransition, SwitchTransition } from \"react-transition-group\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./styles.scss\";\r\nimport TasksWelcomeBanner from \"../../components/TasksWelcomeBanner\";\r\nimport React from \"react\";\r\nimport {\r\n  changeAddTaskInputValue,\r\n  changeSearchTasksInputValue,\r\n  changeTaskFilter,\r\n} from \"../../actions/toDo\";\r\nimport { filterAll } from \"../../constants/tasks\";\r\n\r\nclass TasksScreen extends React.Component {\r\n  componentDidUpdate(prevProps) {\r\n    const {\r\n      tasksList: currentTasksList,\r\n      changeAddTaskInputValue,\r\n      changeTaskFilter,\r\n      changeSearchTasksInputValue,\r\n    } = this.props;\r\n\r\n    const { tasksList: prevTasksList } = prevProps;\r\n\r\n    if (!currentTasksList.length && prevTasksList.length) {\r\n      changeAddTaskInputValue(\"\");\r\n      changeTaskFilter(filterAll.name);\r\n      changeSearchTasksInputValue(\"\");\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { tasksList } = this.props;\r\n    return (\r\n      <div className=\"screen tasks-screen\">\r\n        <SwitchTransition mode=\"out-in\">\r\n          <CSSTransition timeout={300} key={!tasksList.length}>\r\n            {!tasksList.length ? (\r\n              <TasksWelcomeBanner />\r\n            ) : (\r\n              <>\r\n                <TasksHeader />\r\n                <TasksMain />\r\n              </>\r\n            )}\r\n          </CSSTransition>\r\n        </SwitchTransition>\r\n        <TasksFooter />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (store) => {\r\n  const {\r\n    toDo: { list },\r\n  } = store;\r\n\r\n  return {\r\n    tasksList: list,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  changeAddTaskInputValue: (value) => changeAddTaskInputValue(value),\r\n  changeTaskFilter: (filter) => changeTaskFilter(filter),\r\n  changeSearchTasksInputValue: (value) => changeSearchTasksInputValue(value),\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TasksScreen);\r\n","import React, { useEffect } from \"react\";\r\nimport { HashRouter, Routes, Route, useLocation } from \"react-router-dom\";\r\nimport Footer from \"../components/Footer\";\r\nimport MainScreen from \"../screens/MainScreen\";\r\nimport NewsScreen from \"../screens/NewsScreen\";\r\nimport WeatherScreen from \"../screens/WeatherScreen\";\r\nimport TasksScreen from \"../screens/TasksScreen\";\r\nimport { connect } from \"react-redux\";\r\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\r\n\r\nconst Router = ({ store }) => {\r\n  useEffect(() => {\r\n    localStorage.setItem(\"all-in-one\", JSON.stringify(store));\r\n  });\r\n\r\n  return (\r\n    <HashRouter>\r\n      <RouterAnimation />\r\n    </HashRouter>\r\n  );\r\n};\r\n\r\nconst RouterAnimation = () => {\r\n  let location = useLocation();\r\n\r\n  return (\r\n    <>\r\n      <TransitionGroup component={null}>\r\n        <CSSTransition key={location.key} timeout={300}>\r\n          <Routes location={location}>\r\n            <Route path=\"/\" element={<MainScreen />} />\r\n            <Route path=\"/news\" element={<NewsScreen />} />\r\n            <Route path=\"/weather\" element={<WeatherScreen />} />\r\n            <Route path=\"/tasks\" element={<TasksScreen />} />\r\n          </Routes>\r\n        </CSSTransition>\r\n      </TransitionGroup>\r\n      <Footer />\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (store) => {\r\n  return { store: store };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Router);\r\n","import {\r\n  ADD_NEW_TASK,\r\n  CHANGE_TASK_FILTER,\r\n  DELETE_TASK,\r\n  CHANGE_SEARCH_TASKS_INPUT_VALUE,\r\n  TOGGLE_TASK,\r\n  CHANGE_ADD_TASK_INPUT_VALUE,\r\n  CHECK_ALL_TASKS,\r\n  DELETE_COMPLETED_TASKS,\r\n  EDIT_TASK,\r\n} from \"../actions/toDo\";\r\nimport { filterAll } from \"../constants/tasks\";\r\n\r\nlet localInitialState = JSON.parse(localStorage.getItem(\"all-in-one\"));\r\n\r\nif (localInitialState) {\r\n  localInitialState = localInitialState.toDo;\r\n} else localInitialState = null;\r\n\r\nconst initialState = localInitialState || {\r\n  list: [],\r\n  filter: filterAll.name,\r\n  searchTasksInputValue: \"\",\r\n  addTaskInputValue: \"\",\r\n};\r\n\r\nexport function toDoReducer(state = initialState, action) {\r\n  const { type, payload } = action;\r\n  const { list } = state;\r\n\r\n  switch (type) {\r\n    case ADD_NEW_TASK:\r\n      return {\r\n        ...state,\r\n        list: list.concat({\r\n          value: payload.value,\r\n          check: false,\r\n          id: Date.now(),\r\n        }),\r\n      };\r\n    case TOGGLE_TASK:\r\n      return {\r\n        ...state,\r\n        list: list.map((item) => {\r\n          if (item.id === payload.id) {\r\n            return { ...item, check: !item.check };\r\n          } else return item;\r\n        }),\r\n      };\r\n    case DELETE_TASK:\r\n      return { ...state, list: list.filter(({ id }) => id !== payload.id) };\r\n    case CHANGE_TASK_FILTER:\r\n      return { ...state, filter: payload.filter };\r\n    case CHANGE_SEARCH_TASKS_INPUT_VALUE:\r\n      return { ...state, searchTasksInputValue: payload.value };\r\n    case CHANGE_ADD_TASK_INPUT_VALUE:\r\n      return { ...state, addTaskInputValue: payload.value };\r\n    case CHECK_ALL_TASKS:\r\n      let check = false;\r\n      list.forEach((el) => {\r\n        if (!el.check) {\r\n          check = true;\r\n        }\r\n      });\r\n      return {\r\n        ...state,\r\n        list: list.map((el) => {\r\n          return { ...el, check: check };\r\n        }),\r\n      };\r\n    case DELETE_COMPLETED_TASKS:\r\n      return {\r\n        ...state,\r\n        list: list.filter(({ check }) => !check),\r\n      };\r\n    case EDIT_TASK:\r\n      return {\r\n        ...state,\r\n        list: list.map((task) => {\r\n          const { id, value } = payload;\r\n          if (task.id === id) {\r\n            task.value = value;\r\n          }\r\n          return task;\r\n        }),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport { toDoReducer } from \"./toDo\";\r\n\r\nexport const rootReducer = combineReducers({\r\n  toDo: toDoReducer,\r\n});\r\n","// import { createStore, applyMiddleware } from \"redux\";\r\n// import { composeWithDevTools } from \"redux-devtools-extension\";\r\n// import { rootReducer } from \"../reducers/index\";\r\n// import logger from \"redux-logger\";\r\n\r\n// const store = createStore(\r\n//   rootReducer,\r\n//   composeWithDevTools(applyMiddleware(logger))\r\n// );\r\n\r\n// export default store;\r\n\r\nimport { applyMiddleware, createStore } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { rootReducer } from \"../reducers/index\";\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport default store;\r\n","import { Provider } from \"react-redux\";\r\nimport Router from \"./router\";\r\nimport store from \"./store\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <Provider store={store}>\r\n      <Router />\r\n    </Provider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\r\nimport \"./assets/styles/styles.scss\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.unregister();\r\n"],"sourceRoot":""}