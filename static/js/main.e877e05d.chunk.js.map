{"version":3,"sources":["components/Footer/index.js","screens/MainScreen/index.js","screens/NewsScreen/index.js","screens/WeatherScreen/index.js","constants/tasks.js","actions/toDo.js","components/TasksFilterButton/index.js","components/TasksHeader/index.js","components/TasksItem/index.js","components/TasksMain/index.js","components/TasksFooter/index.js","screens/TasksScreen/index.js","router/index.js","reducers/toDo.js","reducers/index.js","store/index.js","App.js","serviceWorkerRegistration.js","index.js"],"names":["Footer","className","to","icon","faHome","faNewspaper","faCloud","faListUl","MainScreen","NewsScreen","WeatherScreen","filterAll","filterActive","filterCompleted","ADD_NEW_TASK","TOGGLE_TASK","DELETE_TASK","CHANGE_TASK_FILTER","CHANGE_SEARCH_TASKS_INPUT_VALUE","CHANGE_ADD_TASK_INPUT_VALUE","CHECK_ALL_TASKS","DELETE_COMPLETED_TASKS","EDIT_TASK","mapDispatchToProps","changeTaskFilter","filter","type","payload","connect","store","toDo","name","title","onClick","TasksHeader","handleChangeInput","e","changeSearchTasksInputValue","props","target","value","handleClickClearButton","this","tasksList","searchTasksInputValue","checkAllTasks","deleteCompletedTasks","check","counter","forEach","el","length","faBackspace","onChange","placeholder","faChevronDown","React","Component","list","Hightlight","otherValue","hightlightValue","ChangedValue","searchValue","string","newSearchValue","replace","regExp","RegExp","matchValue","match","split","map","index","array","shift","TasksItem","handleClickValue","setState","isShowEditValue","editorValue","handleChangeEditor","console","log","addNewValue","editTask","id","state","trim","handlePressEditor","key","handleBlurEditor","handleFocusEditor","event","toggleTask","deleteTask","searchInputValue","faCheck","onFocus","autoFocus","onKeyPress","onBlur","faTimes","data","TasksMain","task","toLowerCase","includes","TasksFooter","changeAddTaskInputValue","handlePressInput","addTaskInputValue","addNewTask","handleClickButton","faPlus","TasksScreen","Router","componentDidUpdate","localStorage","setItem","JSON","stringify","path","element","localInitialState","parse","getItem","initialState","rootReducer","combineReducers","action","concat","Date","now","item","createStore","composeWithDevTools","applyMiddleware","logger","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e877e05d.chunk.js","sourcesContent":["import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport {\r\n  faCloud,\r\n  faHome,\r\n  faListUl,\r\n  faNewspaper,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport \"./styles.scss\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <footer className=\"footer\">\r\n      <div className=\"container footer-container\">\r\n        <nav className=\"nav-menu\">\r\n          <ul>\r\n            <li>\r\n              <NavLink to=\"/\">\r\n                <FontAwesomeIcon icon={faHome} />\r\n                Главная\r\n              </NavLink>\r\n            </li>\r\n            <li>\r\n              <NavLink to=\"/news\">\r\n                <FontAwesomeIcon icon={faNewspaper} />\r\n                Новости\r\n              </NavLink>\r\n            </li>\r\n            <li>\r\n              <NavLink to=\"/weather\">\r\n                <FontAwesomeIcon icon={faCloud} />\r\n                Погода\r\n              </NavLink>\r\n            </li>\r\n            <li>\r\n              <NavLink to=\"/tasks\">\r\n                <FontAwesomeIcon icon={faListUl} />\r\n                Задачи\r\n              </NavLink>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n      </div>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import \"./styles.scss\";\r\n\r\nconst MainScreen = () => {\r\n  return <div className=\"main-screen screen\">MainScreen</div>;\r\n};\r\n\r\nexport default MainScreen;\r\n","const NewsScreen = () => {\r\n  return <div className=\"news-screen\">NewsScreen</div>;\r\n};\r\n\r\nexport default NewsScreen;\r\n","const WeatherScreen = () => {\r\n  return <div className=\"weather-screen\">WeatherScreen</div>;\r\n};\r\n\r\nexport default WeatherScreen;\r\n","// Filters\r\nexport const filterAll = {\r\n  title: \"Все\",\r\n  name: \"all\",\r\n};\r\nexport const filterActive = {\r\n  title: \"Активные\",\r\n  name: \"active\",\r\n};\r\nexport const filterCompleted = {\r\n  title: \"Выполненные\",\r\n  name: \"completed\",\r\n};\r\n","// Types\r\nexport const ADD_NEW_TASK = \"ADD_NEW_TASK\";\r\nexport const TOGGLE_TASK = \"TOGGLE_TASK\";\r\nexport const DELETE_TASK = \"DELETE_TASK\";\r\nexport const CHANGE_TASK_FILTER = \"CHANGE_TASK_FILTER\";\r\nexport const CHANGE_SEARCH_TASKS_INPUT_VALUE =\r\n  \"CHANGE_SEARCH_TASKS_INPUT_VALUE\";\r\nexport const CHANGE_ADD_TASK_INPUT_VALUE = \"CHANGE_ADD_TASK_INPUT_VALUE\";\r\nexport const CHECK_ALL_TASKS = \"CHECK_ALL_TASKS\";\r\nexport const DELETE_COMPLETED_TASKS = \"DELETE_COMPLETED_TASKS\";\r\nexport const EDIT_TASK = \"EDIT_TASK\";\r\n\r\n// Actions\r\nexport const addNewTask = (value) => {\r\n  return {\r\n    type: ADD_NEW_TASK,\r\n    payload: { value },\r\n  };\r\n};\r\n\r\nexport const changeAddTaskInputValue = (value) => {\r\n  return {\r\n    type: CHANGE_ADD_TASK_INPUT_VALUE,\r\n    payload: { value },\r\n  };\r\n};\r\n\r\nexport const toggleTask = (id) => {\r\n  return {\r\n    type: TOGGLE_TASK,\r\n    payload: { id },\r\n  };\r\n};\r\n\r\nexport const deleteTask = (id) => {\r\n  return {\r\n    type: DELETE_TASK,\r\n    payload: { id },\r\n  };\r\n};\r\n\r\nexport const changeTaskFilter = (filter) => {\r\n  return {\r\n    type: CHANGE_TASK_FILTER,\r\n    payload: { filter },\r\n  };\r\n};\r\n\r\nexport const changeSearchTasksInputValue = (value) => {\r\n  return {\r\n    type: CHANGE_SEARCH_TASKS_INPUT_VALUE,\r\n    payload: { value },\r\n  };\r\n};\r\n\r\nexport const checkAllTasks = () => {\r\n  return {\r\n    type: CHECK_ALL_TASKS,\r\n  };\r\n};\r\n\r\nexport const deleteCompletedTasks = () => {\r\n  return {\r\n    type: DELETE_COMPLETED_TASKS,\r\n  };\r\n};\r\n\r\nexport const editTask = (data) => ({\r\n  type: EDIT_TASK,\r\n  payload: data,\r\n});\r\n","import { connect } from \"react-redux\";\r\nimport { changeTaskFilter } from \"../../actions/toDo\";\r\nimport \"./styles.scss\";\r\n\r\nconst TasksFilterButton = ({ name, title, changeTaskFilter, filter }) => {\r\n  const className = `${\r\n    name === filter ? name + \" current\" : name\r\n  } button tasks-filter-button`;\r\n\r\n  return (\r\n    <button onClick={() => changeTaskFilter(name)} className={className}>\r\n      {title}\r\n    </button>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (store) => {\r\n  return {\r\n    filter: store.toDo.filter,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  changeTaskFilter: (filter) => changeTaskFilter(filter),\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TasksFilterButton);\r\n","import { faBackspace, faChevronDown } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  filterActive,\r\n  filterCompleted,\r\n  filterAll,\r\n} from \"../../constants/tasks\";\r\nimport React from \"react\";\r\nimport \"./styles.scss\";\r\nimport TasksFilterButton from \"../TasksFilterButton\";\r\nimport {\r\n  changeSearchTasksInputValue,\r\n  checkAllTasks,\r\n  deleteCompletedTasks,\r\n} from \"../../actions/toDo\";\r\n\r\nclass TasksHeader extends React.Component {\r\n  handleChangeInput = (e) => {\r\n    const { changeSearchTasksInputValue } = this.props;\r\n    changeSearchTasksInputValue(e.target.value);\r\n  };\r\n\r\n  handleClickClearButton = () => {\r\n    const { changeSearchTasksInputValue } = this.props;\r\n    changeSearchTasksInputValue(\"\");\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      tasksList,\r\n      searchTasksInputValue,\r\n      checkAllTasks,\r\n      deleteCompletedTasks,\r\n    } = this.props;\r\n\r\n    let check = false;\r\n    let counter = 0;\r\n\r\n    tasksList.forEach((el) => {\r\n      if (el.check) {\r\n        check = true;\r\n      } else counter += 1;\r\n    });\r\n\r\n    return (\r\n      <header className={`tasks-header${tasksList.length ? \" show\" : \"\"}`}>\r\n        <div className=\"search\">\r\n          <div className=\"container\">\r\n            <div className=\"input-wrapper\">\r\n              <div\r\n                onClick={this.handleClickClearButton}\r\n                className={`clear-input${searchTasksInputValue ? \" show\" : \"\"}`}\r\n              >\r\n                <FontAwesomeIcon icon={faBackspace} />\r\n              </div>\r\n              <input\r\n                onChange={this.handleChangeInput}\r\n                type=\"text\"\r\n                placeholder=\"Поиск\"\r\n                value={searchTasksInputValue}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"bottom-side\">\r\n          <div className=\"container\">\r\n            <div className=\"column left-column\">\r\n              <div\r\n                onClick={checkAllTasks}\r\n                className={`button check-all-button${\r\n                  tasksList.length && !counter ? \" green\" : \"\"\r\n                }`}\r\n              >\r\n                <FontAwesomeIcon icon={faChevronDown} />\r\n              </div>\r\n              <div className=\"counter\">Активные: {counter}</div>\r\n            </div>\r\n            <div className=\"column center-column\">\r\n              <div className=\"filters-wrapper\">\r\n                <TasksFilterButton\r\n                  name={filterAll.name}\r\n                  title={filterAll.title}\r\n                />\r\n                <TasksFilterButton\r\n                  name={filterActive.name}\r\n                  title={filterActive.title}\r\n                />\r\n                <TasksFilterButton\r\n                  name={filterCompleted.name}\r\n                  title={filterCompleted.title}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"column right-column\">\r\n              {check && (\r\n                <div\r\n                  onClick={deleteCompletedTasks}\r\n                  className=\"button delete-completed-button\"\r\n                >\r\n                  Удалить выполненные\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (store) => {\r\n  const {\r\n    toDo: { list, searchTasksInputValue },\r\n  } = store;\r\n\r\n  return {\r\n    tasksList: list,\r\n    searchTasksInputValue: searchTasksInputValue,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  changeSearchTasksInputValue: (value) => changeSearchTasksInputValue(value),\r\n  checkAllTasks: () => checkAllTasks(),\r\n  deleteCompletedTasks: () => deleteCompletedTasks(),\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TasksHeader);\r\n","import { faCheck, faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { deleteTask, editTask, toggleTask } from \"../../actions/toDo\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./styles.scss\";\r\nimport React from \"react\";\r\n\r\nconst Hightlight = ({ otherValue, hightlightValue }) => {\r\n  return (\r\n    <>\r\n      {otherValue}\r\n      <span className={\"hightlight\"}>{hightlightValue}</span>\r\n    </>\r\n  );\r\n};\r\n\r\nconst ChangedValue = ({ searchValue, string }) => {\r\n  if (searchValue) {\r\n    const newSearchValue = searchValue.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\r\n    const regExp = new RegExp(newSearchValue, \"gi\");\r\n    const matchValue = string.match(regExp);\r\n\r\n    if (matchValue) {\r\n      return string.split(regExp).map((otherValue, index, array) => {\r\n        if (index < array.length - 1) {\r\n          const hightlightValue = matchValue.shift();\r\n          return (\r\n            <Hightlight\r\n              hightlightValue={hightlightValue}\r\n              otherValue={otherValue}\r\n              key={index + string}\r\n            />\r\n          );\r\n        }\r\n        return otherValue;\r\n      });\r\n    }\r\n  } else {\r\n    return string;\r\n  }\r\n};\r\n\r\nclass TasksItem extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isShowEditValue: false,\r\n      editorValue: \"\",\r\n    };\r\n  }\r\n\r\n  handleClickValue = () => {\r\n    const { value } = this.props;\r\n    this.setState({ isShowEditValue: true, editorValue: value });\r\n  };\r\n\r\n  handleChangeEditor = (e) => {\r\n    console.log(e.target.value);\r\n    this.setState({ editorValue: e.target.value });\r\n  };\r\n\r\n  addNewValue = () => {\r\n    const { editTask, id } = this.props;\r\n    const { editorValue } = this.state;\r\n\r\n    if (editorValue.trim()) {\r\n      editTask({ id: id, value: editorValue });\r\n      this.setState({ isShowEditValue: false });\r\n    } else {\r\n      this.setState({ isShowEditValue: false, editorValue: \"\" });\r\n    }\r\n  };\r\n\r\n  handlePressEditor = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      this.addNewValue();\r\n    }\r\n  };\r\n\r\n  handleBlurEditor = () => {\r\n    this.addNewValue();\r\n  };\r\n\r\n  handleFocusEditor = (event) => {\r\n    const value = event.target.value;\r\n    event.target.value = \"\";\r\n    event.target.value = value;\r\n  };\r\n\r\n  render() {\r\n    const { value, check, id, toggleTask, deleteTask, searchInputValue } =\r\n      this.props;\r\n\r\n    const { isShowEditValue, editorValue } = this.state;\r\n\r\n    return (\r\n      <li className={`tasks-item${check ? \" checked\" : \"\"}`} id={id}>\r\n        <div className=\"check-button\" onClick={() => toggleTask(id)}>\r\n          <FontAwesomeIcon icon={faCheck} />\r\n        </div>\r\n        <div className=\"value\">\r\n          {isShowEditValue ? (\r\n            <input\r\n              onFocus={this.handleFocusEditor}\r\n              autoFocus\r\n              onChange={this.handleChangeEditor}\r\n              onKeyPress={this.handlePressEditor}\r\n              className=\"inner editor\"\r\n              onBlur={this.handleBlurEditor}\r\n              value={editorValue}\r\n              type=\"text\"\r\n            />\r\n          ) : (\r\n            <div className=\"inner\" onClick={() => this.handleClickValue()}>\r\n              <ChangedValue searchValue={searchInputValue} string={value} />\r\n            </div>\r\n          )}\r\n        </div>\r\n        <div className=\"delete-button\" onClick={() => deleteTask(id)}>\r\n          <FontAwesomeIcon icon={faTimes} />\r\n        </div>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (store) => {\r\n  return {\r\n    searchInputValue: store.toDo.searchTasksInputValue,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  deleteTask: (id) => deleteTask(id),\r\n  toggleTask: (id) => toggleTask(id),\r\n  editTask: (data) => editTask(data),\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TasksItem);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { filterActive, filterCompleted } from \"../../constants/tasks\";\r\nimport TasksItem from \"../TasksItem\";\r\nimport \"./styles.scss\";\r\n\r\nclass TasksMain extends React.Component {\r\n  render() {\r\n    const { tasksList, filter, searchInputValue } = this.props;\r\n\r\n    return (\r\n      <main className=\"tasks-main\">\r\n        <div className=\"tasks-list\">\r\n          <div className=\"container\">\r\n            <ul>\r\n              {tasksList\r\n                .filter((task) => {\r\n                  switch (filter) {\r\n                    case filterActive.name:\r\n                      return !task.check;\r\n                    case filterCompleted.name:\r\n                      return task.check;\r\n                    default:\r\n                      return task;\r\n                  }\r\n                })\r\n                .filter((task) => {\r\n                  if (searchInputValue) {\r\n                    const matchValue = searchInputValue.toLowerCase();\r\n                    if (task.value.toLowerCase().includes(matchValue))\r\n                      return true;\r\n                    return false;\r\n                  } else {\r\n                    return task;\r\n                  }\r\n                })\r\n                .map((task) => {\r\n                  const { check, value, id } = task;\r\n                  return (\r\n                    <TasksItem key={id} check={check} value={value} id={id} />\r\n                  );\r\n                })}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (store) => {\r\n  return {\r\n    tasksList: store.toDo.list,\r\n    filter: store.toDo.filter,\r\n    searchInputValue: store.toDo.searchTasksInputValue,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(TasksMain);\r\n","import \"./styles.scss\";\r\nimport { faPlus } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { connect } from \"react-redux\";\r\nimport { addNewTask, changeAddTaskInputValue } from \"../../actions/toDo\";\r\nimport React from \"react\";\r\n\r\nclass TasksFooter extends React.Component {\r\n  handleChangeInput = (e) => {\r\n    const { changeAddTaskInputValue } = this.props;\r\n    changeAddTaskInputValue(e.target.value);\r\n  };\r\n\r\n  handlePressInput = (e) => {\r\n    const { addTaskInputValue, changeAddTaskInputValue } = this.props;\r\n\r\n    if (e.key === \"Enter\" && addTaskInputValue.trim()) {\r\n      const { addNewTask } = this.props;\r\n      addNewTask(addTaskInputValue);\r\n      changeAddTaskInputValue(\"\");\r\n    }\r\n  };\r\n\r\n  handleClickButton = () => {\r\n    const { changeAddTaskInputValue, addTaskInputValue } = this.props;\r\n    if (addTaskInputValue.trim()) {\r\n      const { addNewTask } = this.props;\r\n      addNewTask(addTaskInputValue);\r\n      changeAddTaskInputValue(\"\");\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { addTaskInputValue } = this.props;\r\n    return (\r\n      <footer className=\"tasks-footer\">\r\n        <div className=\"container\">\r\n          <div className=\"input-wrapper\">\r\n            <input\r\n              onKeyPress={this.handlePressInput}\r\n              onChange={this.handleChangeInput}\r\n              value={addTaskInputValue}\r\n              type=\"text\"\r\n              placeholder=\"Добавить задачу\"\r\n            />\r\n            {addTaskInputValue && (\r\n              <button onClick={this.handleClickButton} className=\"button\">\r\n                <FontAwesomeIcon icon={faPlus} />\r\n              </button>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </footer>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    addTaskInputValue: state.toDo.addTaskInputValue,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  addNewTask: (value) => addNewTask(value),\r\n  changeAddTaskInputValue: (value) => changeAddTaskInputValue(value),\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TasksFooter);\r\n","import TasksHeader from \"../../components/TasksHeader\";\r\nimport TasksMain from \"../../components/TasksMain\";\r\nimport TasksFooter from \"../../components/TasksFooter\";\r\nimport \"./styles.scss\";\r\n\r\nconst TasksScreen = () => {\r\n  return (\r\n    <div className=\"screen tasks-screen\">\r\n      <TasksHeader />\r\n      <TasksMain />\r\n      <TasksFooter />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TasksScreen;\r\n","import React from \"react\";\r\nimport { HashRouter, Routes, Route } from \"react-router-dom\";\r\nimport Footer from \"../components/Footer\";\r\nimport MainScreen from \"../screens/MainScreen\";\r\nimport NewsScreen from \"../screens/NewsScreen\";\r\nimport WeatherScreen from \"../screens/WeatherScreen\";\r\nimport TasksScreen from \"../screens/TasksScreen\";\r\nimport { connect } from \"react-redux\";\r\nclass Router extends React.Component {\r\n  componentDidUpdate = () => {\r\n    const { store } = this.props;\r\n    console.log(store);\r\n    localStorage.setItem(\"all-in-one\", JSON.stringify(store));\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <HashRouter>\r\n        <Routes>\r\n          <Route path=\"/\" element={<MainScreen />} />\r\n          <Route path=\"/news\" element={<NewsScreen />} />\r\n          <Route path=\"/weather\" element={<WeatherScreen />} />\r\n          <Route path=\"/tasks\" element={<TasksScreen />} />\r\n        </Routes>\r\n        <Footer />\r\n      </HashRouter>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (store) => {\r\n  return { store: store };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Router);\r\n","import {\r\n  ADD_NEW_TASK,\r\n  CHANGE_TASK_FILTER,\r\n  DELETE_TASK,\r\n  CHANGE_SEARCH_TASKS_INPUT_VALUE,\r\n  TOGGLE_TASK,\r\n  CHANGE_ADD_TASK_INPUT_VALUE,\r\n  CHECK_ALL_TASKS,\r\n  DELETE_COMPLETED_TASKS,\r\n  EDIT_TASK,\r\n} from \"../actions/toDo\";\r\nimport { filterAll } from \"../constants/tasks\";\r\n\r\nlet localInitialState = JSON.parse(localStorage.getItem(\"all-in-one\"));\r\n\r\nif (localInitialState) {\r\n  localInitialState = localInitialState.toDo;\r\n} else localInitialState = null;\r\n\r\nconst initialState = localInitialState || {\r\n  list: [],\r\n  filter: filterAll.name,\r\n  searchTasksInputValue: \"\",\r\n  addTaskInputValue: \"\",\r\n};\r\n\r\nexport function toDoReducer(state = initialState, action) {\r\n  const { type, payload } = action;\r\n  const { list } = state;\r\n\r\n  switch (type) {\r\n    case ADD_NEW_TASK:\r\n      return {\r\n        ...state,\r\n        list: list.concat({\r\n          value: payload.value,\r\n          check: false,\r\n          id: Date.now(),\r\n        }),\r\n      };\r\n    case TOGGLE_TASK:\r\n      return {\r\n        ...state,\r\n        list: list.map((item) => {\r\n          if (item.id === payload.id) {\r\n            return { ...item, check: !item.check };\r\n          } else return item;\r\n        }),\r\n      };\r\n    case DELETE_TASK:\r\n      return { ...state, list: list.filter(({ id }) => id !== payload.id) };\r\n    case CHANGE_TASK_FILTER:\r\n      return { ...state, filter: payload.filter };\r\n    case CHANGE_SEARCH_TASKS_INPUT_VALUE:\r\n      return { ...state, searchTasksInputValue: payload.value };\r\n    case CHANGE_ADD_TASK_INPUT_VALUE:\r\n      return { ...state, addTaskInputValue: payload.value };\r\n    case CHECK_ALL_TASKS:\r\n      let check = false;\r\n      list.forEach((el) => {\r\n        if (!el.check) {\r\n          check = true;\r\n        }\r\n      });\r\n      return {\r\n        ...state,\r\n        list: list.map((el) => {\r\n          return { ...el, check: check };\r\n        }),\r\n      };\r\n    case DELETE_COMPLETED_TASKS:\r\n      return {\r\n        ...state,\r\n        list: list.filter(({ check }) => !check),\r\n      };\r\n    case EDIT_TASK:\r\n      return {\r\n        ...state,\r\n        list: list.map((task) => {\r\n          const { id, value } = payload;\r\n          if (task.id === id) {\r\n            task.value = value;\r\n          }\r\n          return task;\r\n        }),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport { toDoReducer } from \"./toDo\";\r\n\r\nexport const rootReducer = combineReducers({\r\n  toDo: toDoReducer,\r\n});\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport { rootReducer } from \"../reducers/index\";\r\nimport logger from \"redux-logger\";\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(logger))\r\n);\r\n\r\nexport default store;\r\n","import { Provider } from \"react-redux\";\r\nimport Router from \"./router\";\r\nimport store from \"./store\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <Provider store={store}>\r\n      <Router />\r\n    </Provider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\r\nimport \"./assets/styles/styles.scss\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.unregister();\r\n"],"sourceRoot":""}